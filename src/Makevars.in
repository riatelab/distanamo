TARGET = @TARGET@

PROFILE = @PROFILE@

# Add flags if necessary
RUSTFLAGS = 

TARGET_DIR = $(CURDIR)/rust/target
LIBDIR = $(TARGET_DIR)/$(TARGET)/$(subst dev,debug,$(PROFILE))
STATLIB = $(LIBDIR)/libdistanamo.a
PKG_LIBS = -L$(LIBDIR) -ldistanamo

CARGO_BUILD_ARGS = --lib --profile $(PROFILE) --manifest-path=./rust/Cargo.toml --target-dir $(TARGET_DIR)

all: C_clean

$(SHLIB): $(STATLIB)

$(STATLIB):
	# In some environments, ~/.cargo/bin might not be included in PATH, so we need
	# to set it here to ensure cargo can be invoked. It is appended to PATH and
	# therefore is only used if cargo is absent from the user's PATH.

	# Extract vendored crates
	# mkdir -p ./rust/vendor && \
	#     $(TAR) --extract --xz -f ./rust/vendor.tar.xz -C ./rust/vendor && \
	#     mkdir -p ./rust/.cargo && \
	#     cp ./rust/vendor-config.toml ./rust/.cargo/config.toml

	export PATH="$(PATH):$(HOME)/.cargo/bin" && \
	  export CC="$(CC)" && \
	  export CFLAGS="$(CFLAGS)" && \
	  export RUSTFLAGS="$(RUSTFLAGS)" && \
	  if [ "$(TARGET)" != "wasm32-unknown-emscripten" ]; then \
	    cargo build $(CARGO_BUILD_ARGS); \
	  else \
	    export CARGO_PROFILE_DEV_PANIC="abort" && \
	    export CARGO_PROFILE_RELEASE_PANIC="abort" && \
	    cargo +nightly build $(CARGO_BUILD_ARGS) --target $(TARGET) -Zbuild-std=panic_abort,std; \
	  fi

	  # rm -Rf ./rust/vendor

C_clean:
	rm -Rf $(SHLIB) $(STATLIB) $(OBJECTS) ./rust/.cargo

clean:
	rm -Rf $(SHLIB) $(STATLIB) $(OBJECTS) ./rust/.cargo ./rust/target
