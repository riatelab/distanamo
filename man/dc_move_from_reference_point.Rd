% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dc_move_from_reference_point.R
\name{dc_move_from_reference_point}
\alias{dc_move_from_reference_point}
\title{Move points from a reference point}
\usage{
dc_move_from_reference_point(
  reference_point,
  other_points,
  duration_col_name,
  factor
)
}
\arguments{
\item{reference_point}{The point from which the other points will be moved,
an sf POINT object}

\item{other_points}{The other points to move, an sf POINT object}

\item{duration_col_name}{The name of the column containing the durations
in the other_points sf object}

\item{factor}{The factor of displacement (default: 1)}
}
\value{
A list object with the source points and the image points, ready
to be used with the dc_create function
}
\description{
Move points from a reference point using durations between the reference point
and all the other points.
}
\examples{
library(sf)

# Read source points
source_pts <- st_read(
  dsn = system.file("gpkg/data-prefecture.gpkg", package = "distanamo"),
  layer = "prefecture", quiet = TRUE
)

# Read the background layer to deform
background_layer <- st_read(
  dsn = system.file("gpkg/data-prefecture.gpkg", package = "distanamo"),
  layer = "departement", quiet = TRUE
)

durations_mat <- read.csv(system.file("csv/mat.csv", package = "distanamo"), row.names = 1)
dur <- durations_mat["CAEN", ]

source_pts$durations <- as.double(dur)

ref_point <- subset(source_pts, source_pts$NOM_COM == "CAEN")
other_points <- subset(source_pts, !source_pts$NOM_COM == "CAEN")

# Generate position from durations between the reference point
# and the other points
positioning_result <- dc_move_from_reference_point(
  reference_point = ref_point,
  other_points = other_points,
  duration_col_name = "durations",
  factor = 1
)

# Display and plot useful information about the positioning step
plot(positioning_result)
summary(positioning_result)

# Create the interpolation grid
igrid <- dc_create(
  source_points = positioning_result$source_points,
  image_points = positioning_result$image_points,
  precision = 2.0,
  bbox = st_bbox(background_layer)
)

# Deform the background layer
background_deformed <- dc_interpolate(
  interpolation_grid = igrid,
  layer_to_deform = background_layer
)

}
